{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","propsTypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.24dde864.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        \r\n         <nav  className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title} </Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title} </a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n     aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n<label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n    )\r\n}\r\nNavbar.propsTypes= {\r\n    title:PropTypes.string.isRequired,\r\n                  aboutText: PropTypes.string.isRequired\r\n   }\r\n\r\n   Navbar.defaultProps = {\r\n       title: 'Set title here',\r\n       aboutText: 'About'\r\n   }; ","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\nconst handleUpClick = ()=> {\r\n   // console.log(\"Uppercase was clicked: \" + text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"converted to uppercase\", \"success\");\r\n}\r\nconst handleLoClick = ()=> {\r\n    // console.log(\"Uppercase was clicked: \" + text);\r\n     let newtext = text.toLowerCase();\r\n     setText(newtext);\r\n   props.showAlert(\"converted to lowercase\", \"success\");\r\n}\r\nconst handleClearClick = ()=> {\r\n    // console.log(\"Uppercase was clicked: \" + text);\r\n     let newtext = '';\r\n     setText(newtext);\r\n     props.showAlert(\"Text cleared\", \"success\");\r\n}\r\n// Credit A\r\nconst handleCopy =()=> {\r\n    var text = document.getElementById(\"mybox\");\r\n    text.select(); \r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copy to Clipboard\", \"success\");\r\n}\r\n// credits: Coding Wala\r\nconst handleExtraSpaces= () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join (\" \"))\r\n    props.showAlert(\"Extra spaces Removed\", \"success\");\r\n}\r\n\r\n\r\n const handleOnChange = (event)=>{\r\n    // console.log(\"On change\");\r\n     setText(event.target.value);\r\n }\r\n\r\n    const [text, setText] = useState('');\r\n   // text= \"new text\";// wrong way to change the state\r\n   // setText(\"new text\");// Correct way to change the state\r\n    return (\r\n        <>\r\n    <div className=\"container\" style={{color:props.mode==='dark' ? 'white':'#001d33ed'}}>\r\n           <h1>{props.heading}</h1>\r\n             <div className=\"mb-3\">\r\n             <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'? 'grey':'white',\r\n             color:props.mode==='dark' ? 'white':'#001d33ed'}}  id=\"mybox\"\r\n             rows=\"8\"></textarea>\r\n     </div> \r\n              <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n              <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n     </div>\r\n     <div className=\"container my-5\"  style={{color:props.mode==='dark' ? 'white':'#001d33ed'}}>\r\n     <h2 >Your text summary</h2>\r\n     <p>{text.split(\" \").length } words and {text.length} characters</p>\r\n     <p> {0.008* text.split(\" \").length} Minutes read </p>\r\n     <h2>Preview</h2>\r\n     <p>{text.length>0?text: \"Enter something in the textbox above to preview it here\"}</p>\r\n     </div>\r\n     </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props)  {\r\n    const capitalize = (word)=> {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    \r\n       props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n           \r\n      </div>  \r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n"," import './App.css';\n import Navbar from './components/Navbar';\n import TextForm from './components/TextForm';\n//  import About from './components/About';\n import React, {useState} from 'react';\n import Alert from './components/Alert';\n//   import{\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n//  } from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode] = useState('light'); // Whather dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type)=>{\n   setAlert({\n     msg:message,\n     type: type\n   }) \n   setTimeout(() => {\n     setAlert(null);\n   },1500);\n  }\n  const toggleMode= ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#001d33ed ';\n      showAlert(\"Dark mode has been enabled\",\"success\" );\n      document.title = \"TextUtils - Dark Mode\";\n    //  setInterval(()=>{\n    //    document.title = \"TextUtils is Amazing Mode\";\n    //  },  2000);\n    //  setInterval(()=>{\n    //   document.title = \"Install TextUtils Now\";\n    // },  1500);\n     \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\" );\n     document.title = \"TextUtils - Light Mode\";\n    }\n  }\n  return (\n  <>\n \n{/* <Navbar title=\"TextUtils\" aboutText=\"TextUtils\" /> */}\n{/* <Navbar/> */}\n{/* <Router> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>  \n<Alert alert={alert}/> \n<div className=\"container my-3\">\n{/* <Switch> */}\n{/* /users--> component 1\n/users/home --> component 2 */}\n          {/* <Route exact path=\"/about\">\n            <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading= \"Enter the text to analyaze below\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n        </div>\n     {/* </Router> */}\n     \n</>\n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}